@{
    ViewData["Title"] = "健康分析 - 管理員";
    Layout = null;
}

<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: linear-gradient(135deg, #FFEBEE 0%, #FFCDD2 100%);
            min-height: 100vh;
            font-family: 'Microsoft JhengHei', 'Segoe UI', Arial, sans-serif;
            padding: 2rem 1rem;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 25px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #EF5350 0%, #E53935 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .header-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .header-subtitle {
            font-size: 1.1rem;
            opacity: 0.95;
        }

        .content {
            padding: 2rem;
        }

        .button-group {
            margin-bottom: 2rem;
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 10px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            transition: all 0.3s ease;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #78909C 0%, #607D8B 100%);
            color: white;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }

        .search-section {
            background: linear-gradient(135deg, #FFEBEE 0%, #FFCDD2 100%);
            border: 3px solid #EF5350;
            padding: 2rem;
            border-radius: 15px;
            margin-bottom: 2rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #C62828;
            margin-bottom: 1.5rem;
            text-align: center;
        }

        .report-types {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .report-type-card {
            background: white;
            border: 3px solid #FFCDD2;
            border-radius: 15px;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .report-type-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            border-color: #EF5350;
        }

        .report-type-card.active {
            background: linear-gradient(135deg, #EF5350 0%, #E53935 100%);
            color: white;
            border-color: #E53935;
        }

        .report-type-icon {
            font-size: 2.5rem;
            margin-bottom: 0.5rem;
        }

        .report-type-name {
            font-size: 1.2rem;
            font-weight: 600;
        }

        .input-group {
            background: white;
            border: 2px solid #FFCDD2;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .form-row {
            display: flex;
            gap: 1rem;
            align-items: center;
            flex-wrap: wrap;
            margin-bottom: 1rem;
        }

        .form-row label {
            font-weight: 600;
            color: #C62828;
            min-width: 120px;
        }

        .form-input {
            flex: 1;
            padding: 0.75rem;
            border: 2px solid #EF5350;
            border-radius: 10px;
            font-size: 1rem;
            min-width: 180px;
        }

        .date-hint {
            color: #D32F2F;
            font-weight: 500;
            font-size: 0.9rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #EF5350 0%, #E53935 100%);
            color: white;
            padding: 1rem 3rem;
            font-size: 1.1rem;
        }

        .btn-success {
            background: linear-gradient(135deg, #42A5F5 0%, #1E88E5 100%);
            color: white;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 3rem;
        }

        .spinner {
            border: 4px solid #FFCDD2;
            border-top: 4px solid #EF5350;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .patient-info {
            display: none;
            background: #E3F2FD;
            border: 2px solid #42A5F5;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .report-content {
            display: none;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: linear-gradient(135deg, #FFEBEE 0%, #FFCDD2 100%);
            border: 2px solid #EF5350;
            border-radius: 15px;
            padding: 1.5rem;
            text-align: center;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #C62828;
            margin-bottom: 0.5rem;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #B71C1C;
        }

        .stat-detail {
            font-size: 0.85rem;
            color: #C62828;
            margin-top: 0.5rem;
        }

        .chart-section {
            background: white;
            border: 2px solid #FFCDD2;
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .chart-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #C62828;
            margin-bottom: 1rem;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        th {
            background: linear-gradient(135deg, #EF5350 0%, #E53935 100%);
            color: white;
            padding: 0.75rem;
            text-align: left;
            font-weight: 700;
        }

        td {
            padding: 0.75rem;
            border-bottom: 1px solid #FFCDD2;
        }

        tr:hover {
            background: #FFEBEE;
        }

        .badge {
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 600;
        }

        .badge-success {
            background: #C8E6C9;
            color: #2E7D32;
        }

        .badge-danger {
            background: #FFCDD2;
            color: #C62828;
        }

        .badge-warning {
            background: #FFE0B2;
            color: #E65100;
        }

        @@media (max-width: 768px) {
            .report-types {
                grid-template-columns: 1fr;
            }

            .form-row {
                flex-direction: column;
                align-items: stretch;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="header-title">📊 健康分析 - 管理員</h1>
            <p class="header-subtitle">查看病患健康趨勢與統計報表</p>
        </div>

        <div class="content">
            <div class="button-group">
                <a href="@Url.Action("Index", "Home")" class="btn btn-secondary">
                    ← 返回主選單
                </a>
            </div>

            <!-- 搜尋區域 -->
            <div class="search-section">
                <h2 class="section-title">🔍 搜尋病患報表</h2>

                <!-- 病患身分證 -->
                <div class="input-group">
                    <div class="form-row">
                        <label>病患身分證:</label>
                        <input type="text" id="idNumber" class="form-input"
                               placeholder="例如: A123456789" maxlength="10" />
                    </div>
                </div>

                <!-- 報表類型選擇 -->
                <div style="margin-bottom: 1.5rem;">
                    <h3 style="color: #C62828; margin-bottom: 1rem;">📋 報表類型</h3>
                    <div class="report-types">
                        <div class="report-type-card" data-type="0" onclick="selectReportType(0)">
                            <div class="report-type-icon">📅</div>
                            <div class="report-type-name">每日報表</div>
                        </div>
                        <div class="report-type-card active" data-type="1" onclick="selectReportType(1)">
                            <div class="report-type-icon">📆</div>
                            <div class="report-type-name">每週報表</div>
                        </div>
                        <div class="report-type-card" data-type="2" onclick="selectReportType(2)">
                            <div class="report-type-icon">📋</div>
                            <div class="report-type-name">每月報表</div>
                        </div>
                        <div class="report-type-card" data-type="3" onclick="selectReportType(3)">
                            <div class="report-type-icon">📑</div>
                            <div class="report-type-name">每年報表</div>
                        </div>
                    </div>
                </div>

                <!-- 日期選擇 -->
                <div class="input-group">
                    <!-- 每日 -->
                    <div id="dailyDateSelection" style="display:none;">
                        <div class="form-row">
                            <label>選擇日期:</label>
                            <input type="date" id="dailyDate" class="form-input" />
                            <span class="date-hint">選擇單一日期</span>
                        </div>
                    </div>

                    <!-- 每週 -->
                    <div id="weeklyDateSelection">
                        <div class="form-row">
                            <label>週開始日期:</label>
                            <input type="date" id="weeklyStartDate" class="form-input" />
                            <span class="date-hint">系統將自動計算至該週結束日期 (+6天)</span>
                        </div>
                    </div>

                    <!-- 每月 -->
                    <div id="monthlyDateSelection" style="display:none;">
                        <div class="form-row">
                            <label>選擇年月:</label>
                            <input type="month" id="monthlyDate" class="form-input" />
                            <span class="date-hint">選擇年份和月份</span>
                        </div>
                    </div>

                    <!-- 每年 -->
                    <div id="yearlyDateSelection" style="display:none;">
                        <div class="form-row">
                            <label>選擇年份:</label>
                            <select id="yearlyDate" class="form-input"></select>
                            <span class="date-hint">選擇完整年份</span>
                        </div>
                    </div>
                </div>

                <div style="text-align: center;">
                    <button class="btn btn-primary" onclick="searchPatient()">
                        🔍 查詢報表
                    </button>
                    <button class="btn btn-success" onclick="downloadPdf()" id="downloadBtn" style="display:none;">
                        📥 下載 PDF
                    </button>
                </div>
            </div>

            <!-- 載入中 -->
            <div id="loadingDiv" class="loading">
                <div class="spinner"></div>
                <p style="color: #EF5350; font-size: 1.2rem; font-weight: 600;">正在產生報表...</p>
            </div>

            <!-- 病患資訊 -->
            <div id="patientInfo" class="patient-info">
                <h3 style="margin-bottom: 1rem;">👤 病患資訊</h3>
                <p style="margin: 0.5rem 0;">
                    <strong>姓名:</strong> <span id="patientName"></span>
                </p>
                <p style="margin: 0.5rem 0;">
                    <strong>身分證:</strong> <span id="patientId"></span>
                </p>
            </div>

            <!-- 報表內容 -->
            <div id="reportContent" class="report-content">
                <!-- 🆕 每日報表 - 表格顯示 -->
                <div id="dailyTable" style="display:none;">
                    <div class="chart-section">
                        <h3 class="chart-title">📊 當日健康數據</h3>
                        <table style="width: 100%; border-collapse: collapse;">
                            <thead>
                                <tr style="background: #f3f4f6;">
                                    <th style="padding: 1rem; text-align: left; border: 1px solid #e5e7eb; font-weight: 600;">項目</th>
                                    <th style="padding: 1rem; text-align: center; border: 1px solid #e5e7eb; font-weight: 600;">測量值</th>
                                    <th style="padding: 1rem; text-align: center; border: 1px solid #e5e7eb; font-weight: 600;">標準值</th>
                                    <th style="padding: 1rem; text-align: center; border: 1px solid #e5e7eb; font-weight: 600;">狀態</th>
                                </tr>
                            </thead>
                            <tbody id="dailyTableBody">
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- 統計摘要 (週/月/年報表用) -->
                <div id="summarySection" class="chart-section">
                    <h3 class="chart-title">📊 統計摘要</h3>
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-label">總天數</div>
                            <div class="stat-value" id="totalDays">0</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">血壓異常</div>
                            <div class="stat-value" id="highBPDays" style="color: #C62828;">0</div>
                            <div class="stat-detail" id="highBPPercentage"></div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">血糖異常</div>
                            <div class="stat-value" id="highBSDays" style="color: #C62828;">0</div>
                            <div class="stat-detail" id="highBSPercentage"></div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">飲水不足</div>
                            <div class="stat-value" id="lowWaterDays" style="color: #EF6C00;">0</div>
                            <div class="stat-detail" id="lowWaterPercentage"></div>
                        </div>
                    </div>

                    <table>
                        <thead>
                            <tr>
                                <th>項目</th>
                                <th>平均值</th>
                                <th>標準值</th>
                                <th>狀態</th>
                            </tr>
                        </thead>
                        <tbody id="avgTable"></tbody>
                    </table>
                </div>

                <!-- 圖表區域 (週/月/年報表用) -->
                <div id="chartsSection">
                    <div class="chart-section">
                        <h3 class="chart-title">📈 血壓趨勢</h3>
                        <canvas id="bpChart" style="max-height: 300px;"></canvas>
                    </div>

                    <div class="chart-section">
                        <h3 class="chart-title">🩸 血糖趨勢</h3>
                        <canvas id="bsChart" style="max-height: 300px;"></canvas>
                    </div>

                    <div class="chart-section">
                        <h3 class="chart-title">💧 飲水量趨勢</h3>
                        <canvas id="waterChart" style="max-height: 300px;"></canvas>
                    </div>

                    <div class="chart-section">
                        <h3 class="chart-title">🏃 運動時間趨勢</h3>
                        <canvas id="exerciseChart" style="max-height: 300px;"></canvas>
                    </div>

                    <!-- 🆕 抽菸和檳榔圖表 -->
                    <div style="background: #fff; padding: 1.5rem; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                        <canvas id="cigaretteChart" style="height: 300px;"></canvas>
                    </div>

                    <div style="background: #fff; padding: 1.5rem; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                        <canvas id="betelNutChart" style="height: 300px;"></canvas>
                    </div>

                    <!-- 飲料 & 三餐記錄 -->
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(400px, 1fr)); gap: 1.5rem;">
                        <div class="chart-section">
                            <h3 class="chart-title">🥤 飲料記錄</h3>
                            <div id="beverageTable"></div>
                        </div>

                        <div class="chart-section">
                            <h3 class="chart-title">🍽️ 三餐記錄</h3>
                            <div id="mealTable"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let currentReportType = 1;
        let currentReport = null;
        let charts = {};

        document.addEventListener('DOMContentLoaded', function () {
            console.log('✅ 管理員頁面載入完成');
            initializeYearSelect();
            setDefaultDates();
        });

        function initializeYearSelect() {
            const yearSelect = document.getElementById('yearlyDate');
            const currentYear = new Date().getFullYear();
            for (let year = currentYear; year >= currentYear - 10; year--) {
                const option = document.createElement('option');
                option.value = year;
                option.textContent = year + ' 年';
                yearSelect.appendChild(option);
            }
        }

        function setDefaultDates() {
            const today = new Date();
            document.getElementById('dailyDate').valueAsDate = today;

            const lastMonday = new Date(today);
            lastMonday.setDate(today.getDate() - today.getDay() - 6);
            document.getElementById('weeklyStartDate').valueAsDate = lastMonday;

            document.getElementById('monthlyDate').value = today.toISOString().substr(0, 7);
        }

        function selectReportType(type) {
            console.log('選擇報表類型:', type);
            currentReportType = type;

            document.querySelectorAll('.report-type-card').forEach(card => {
                card.classList.remove('active');
            });
            document.querySelector(`.report-type-card[data-type="${type}"]`).classList.add('active');

            document.getElementById('dailyDateSelection').style.display = type === 0 ? 'block' : 'none';
            document.getElementById('weeklyDateSelection').style.display = type === 1 ? 'block' : 'none';
            document.getElementById('monthlyDateSelection').style.display = type === 2 ? 'block' : 'none';
            document.getElementById('yearlyDateSelection').style.display = type === 3 ? 'block' : 'none';

            document.getElementById('patientInfo').style.display = 'none';
            document.getElementById('reportContent').style.display = 'none';
            document.getElementById('downloadBtn').style.display = 'none';
        }

        async function searchPatient() {
            const idNumber = document.getElementById('idNumber').value.trim();

            if (!idNumber) {
                alert('請輸入病患身分證字號');
                return;
            }

            const idPattern = /^[A-Z][12]\d{8}$/;
            if (!idPattern.test(idNumber)) {
                alert('身分證格式錯誤\n正確格式: A123456789');
                return;
            }

            let startDate, endDate;

            switch (currentReportType) {
                case 0:
                    const daily = document.getElementById('dailyDate').value;
                    if (!daily) {
                        alert('請選擇日期');
                        return;
                    }
                    startDate = daily;
                    endDate = daily;
                    break;

                case 1:
                    const weekStart = document.getElementById('weeklyStartDate').value;
                    if (!weekStart) {
                        alert('請選擇週開始日期');
                        return;
                    }
                    startDate = weekStart;
                    const weekEnd = new Date(weekStart);
                    weekEnd.setDate(weekEnd.getDate() + 6);
                    endDate = weekEnd.toISOString().substr(0, 10);
                    break;

                case 2:
                    const monthly = document.getElementById('monthlyDate').value;
                    if (!monthly) {
                        alert('請選擇年月');
                        return;
                    }
                    const [year, month] = monthly.split('-');
                    startDate = `${year}-${month}-01`;
                    const lastDay = new Date(year, month, 0).getDate();
                    endDate = `${year}-${month}-${String(lastDay).padStart(2, '0')}`;
                    break;

                case 3:
                    const yearVal = document.getElementById('yearlyDate').value;
                    startDate = `${yearVal}-01-01`;
                    endDate = `${yearVal}-12-31`;
                    break;
            }

            document.getElementById('loadingDiv').style.display = 'block';
            document.getElementById('patientInfo').style.display = 'none';
            document.getElementById('reportContent').style.display = 'none';
            document.getElementById('downloadBtn').style.display = 'none';

            try {
                const response = await fetch('/Analysis/GetAdminReport', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        idNumber,
                        reportType: currentReportType,
                        startDate,
                        endDate
                    })
                });

                const result = await response.json();

                if (result.success) {
                    currentReport = result.data;
                    displayPatientInfo(result.data);
                    displayReport(result.data);
                    document.getElementById('downloadBtn').style.display = 'inline-block';
                } else {
                    alert(result.message || '查詢失敗');
                }
            } catch (error) {
                console.error('❌ 查詢錯誤:', error);
                alert('系統錯誤，請稍後再試');
            } finally {
                document.getElementById('loadingDiv').style.display = 'none';
            }
        }

        function displayPatientInfo(data) {
            document.getElementById('patientInfo').style.display = 'block';
            document.getElementById('patientName').textContent = data.patientName;
            document.getElementById('patientId').textContent = maskIdNumber(data.idNumber);
        }

        function maskIdNumber(id) {
            if (!id || id.length < 10) return '***';
            return id.substring(0, 4) + '***' + id.substring(7);
        }

        function displayReport(data) {
            console.log('📈 顯示報表數據:', data);
            document.getElementById('reportContent').style.display = 'block';

            if (currentReportType === 0) {
                document.getElementById('dailyTable').style.display = 'block';
                document.getElementById('summarySection').style.display = 'none';
                document.getElementById('chartsSection').style.display = 'none';
                displayDailyTable(data);
            } else {
                document.getElementById('dailyTable').style.display = 'none';
                document.getElementById('summarySection').style.display = 'block';
                document.getElementById('chartsSection').style.display = 'block';
                displayChartReport(data);
            }
        }

        function displayDailyTable(data) {
            const tbody = document.getElementById('dailyTableBody');
            tbody.innerHTML = '';

            const stats = data.statistics;
            const records = data.records;
            const record = records && records.length > 0 ? records[0] : null;

            const rows = [];

            if (stats.avgSystolicBP !== null && stats.avgDiastolicBP !== null) {
                const isAbnormal = stats.avgSystolicBP > 120 || stats.avgDiastolicBP > 80;
                rows.push({
                    icon: '❤️',
                    name: '血壓',
                    value: `${stats.avgSystolicBP.toFixed(0)} / ${stats.avgDiastolicBP.toFixed(0)} mmHg`,
                    standard: '≤ 120/80 mmHg',
                    status: isAbnormal ? '<span style="color: #dc2626; font-weight: 700;">⚠️ 偏高</span>' : '<span style="color: #16a34a;">✓ 正常</span>',
                    isAbnormal: isAbnormal
                });
            }

            if (stats.avgBloodSugar !== null) {
                const isAbnormal = stats.avgBloodSugar > 99;
                rows.push({
                    icon: '🩸',
                    name: '血糖',
                    value: `${stats.avgBloodSugar.toFixed(1)} mg/dL`,
                    standard: '≤ 99 mg/dL',
                    status: isAbnormal ? '<span style="color: #dc2626; font-weight: 700;">⚠️ 偏高</span>' : '<span style="color: #16a34a;">✓ 正常</span>',
                    isAbnormal: isAbnormal
                });
            }

            if (stats.avgWaterIntake !== null) {
                const isAbnormal = stats.avgWaterIntake < 2000;
                rows.push({
                    icon: '💧',
                    name: '飲水量',
                    value: `${stats.avgWaterIntake.toFixed(0)} ml`,
                    standard: '≥ 2000 ml',
                    status: isAbnormal ? '<span style="color: #dc2626; font-weight: 700;">⚠️ 不足</span>' : '<span style="color: #16a34a;">✓ 充足</span>',
                    isAbnormal: isAbnormal
                });
            }

            if (stats.avgExerciseDuration !== null) {
                const isAbnormal = stats.avgExerciseDuration < 30;
                rows.push({
                    icon: '🏃',
                    name: '運動時間',
                    value: `${stats.avgExerciseDuration.toFixed(1)} 分鐘`,
                    standard: '≥ 30 分鐘',
                    status: isAbnormal ? '<span style="color: #dc2626; font-weight: 700;">⚠️ 不足</span>' : '<span style="color: #16a34a;">✓ 充足</span>',
                    isAbnormal: isAbnormal
                });
            }

            if (stats.avgCigarettes !== null && stats.avgCigarettes > 0) {
                rows.push({
                    icon: '🚬',
                    name: '抽菸',
                    value: `${stats.avgCigarettes.toFixed(0)} 支`,
                    standard: '0 支',
                    status: '<span style="color: #dc2626; font-weight: 700;">⚠️ 建議戒菸</span>',
                    isAbnormal: true
                });
            }

            if (stats.avgBetelNut !== null && stats.avgBetelNut > 0) {
                rows.push({
                    icon: '🌿',
                    name: '嚼檳榔',
                    value: `${stats.avgBetelNut.toFixed(0)} 次`,
                    standard: '0 次',
                    status: '<span style="color: #dc2626; font-weight: 700;">⚠️ 建議戒除</span>',
                    isAbnormal: true
                });
            }

            rows.forEach(row => {
                const tr = document.createElement('tr');
                tr.style.borderBottom = '1px solid #e5e7eb';
                if (row.isAbnormal) {
                    tr.style.background = '#fef2f2';
                }

                tr.innerHTML = `
                            <td style="padding: 1rem; border: 1px solid #e5e7eb;">
                                <span style="font-size: 1.2rem; margin-right: 0.5rem;">${row.icon}</span>
                                <strong>${row.name}</strong>
                            </td>
                            <td style="padding: 1rem; text-align: center; border: 1px solid #e5e7eb; font-size: 1.1rem; font-weight: 600; ${row.isAbnormal ? 'color: #dc2626;' : ''}">${row.value}</td>
                            <td style="padding: 1rem; text-align: center; border: 1px solid #e5e7eb; color: #6b7280;">${row.standard}</td>
                            <td style="padding: 1rem; text-align: center; border: 1px solid #e5e7eb;">${row.status}</td>
                        `;
                tbody.appendChild(tr);
            });

            // 三餐記錄
            if (record && (record.meals_Breakfast || record.meals_Lunch || record.meals_Dinner)) {
                const mealTr = document.createElement('tr');
                mealTr.style.borderBottom = '1px solid #e5e7eb';
                mealTr.style.background = '#f9fafb';

                const calculateMealTotal = (items) => {
                    let total = 0;
                    let others = [];

                    items.forEach(item => {
                        if (!item || item === '0') return;

                        if (item.includes('+')) {
                            const parts = item.split('+');
                            parts.forEach(part => {
                                const num = parseFloat(part.trim());
                                if (!isNaN(num)) {
                                    total += num;
                                } else {
                                    others.push(part.trim());
                                }
                            });
                        } else {
                            const num = parseFloat(item);
                            if (!isNaN(num)) {
                                total += num;
                            } else {
                                others.push(item);
                            }
                        }
                    });

                    const result = [];
                    if (total > 0) {
                        result.push(total % 1 === 0 ? total.toString() : total.toFixed(1));
                    }
                    result.push(...others);

                    return result.length > 0 ? result.join(' + ') : null;
                };

                let totalVeg = [];
                let totalProtein = [];
                let totalCarbs = [];

                [record.meals_Breakfast, record.meals_Lunch, record.meals_Dinner].forEach(meal => {
                    if (meal) {
                        if (meal.vegetables && meal.vegetables !== '0') totalVeg.push(meal.vegetables);
                        if (meal.protein && meal.protein !== '0') totalProtein.push(meal.protein);
                        if (meal.carbs && meal.carbs !== '0') totalCarbs.push(meal.carbs);
                    }
                });

                const vegTotal = calculateMealTotal(totalVeg);
                const proteinTotal = calculateMealTotal(totalProtein);
                const carbsTotal = calculateMealTotal(totalCarbs);

                let mealContent = '<div style="line-height: 1.8;">';

                if (vegTotal) {
                    mealContent += `<div>🥬 <strong>蔬菜:</strong> ${vegTotal}</div>`;
                }
                if (proteinTotal) {
                    mealContent += `<div>🥩 <strong>蛋白質:</strong> ${proteinTotal}</div>`;
                }
                if (carbsTotal) {
                    mealContent += `<div>🍚 <strong>澱粉:</strong> ${carbsTotal}</div>`;
                }

                mealContent += '</div>';

                mealTr.innerHTML = `
                            <td style="padding: 1rem; border: 1px solid #e5e7eb;">
                                <span style="font-size: 1.2rem; margin-right: 0.5rem;">🍽️</span>
                                <strong>今日三餐總計</strong>
                            </td>
                            <td colspan="3" style="padding: 1rem; border: 1px solid #e5e7eb; text-align: left;">
                                ${mealContent}
                            </td>
                        `;
                tbody.appendChild(mealTr);
            }

            // 飲料記錄
            if (record && record.beverage) {
                const bevTr = document.createElement('tr');
                bevTr.style.borderBottom = '1px solid #e5e7eb';
                bevTr.style.background = '#f9fafb';

                bevTr.innerHTML = `
                            <td style="padding: 1rem; border: 1px solid #e5e7eb;">
                                <span style="font-size: 1.2rem; margin-right: 0.5rem;">🥤</span>
                                <strong>其他飲料</strong>
                            </td>
                            <td colspan="3" style="padding: 1rem; border: 1px solid #e5e7eb; text-align: left; font-size: 1.05rem;">
                                ${record.beverage}
                            </td>
                        `;
                tbody.appendChild(bevTr);
            }

            if (rows.length === 0 && (!record || (!record.meals_Breakfast && !record.meals_Lunch && !record.meals_Dinner && !record.beverage))) {
                tbody.innerHTML = '<tr><td colspan="4" style="padding: 2rem; text-align: center; color: #999;">該日期無健康數據</td></tr>';
            }
        }

        function displayChartReport(data) {
            const stats = data.statistics;

            document.getElementById('totalDays').textContent = stats.totalDays;
            document.getElementById('highBPDays').textContent = stats.highBPDays;
            document.getElementById('highBPPercentage').textContent = `(${stats.highBPPercentage.toFixed(1)}%)`;
            document.getElementById('highBSDays').textContent = stats.highBloodSugarDays;
            document.getElementById('highBSPercentage').textContent = `(${stats.highBloodSugarPercentage.toFixed(1)}%)`;
            document.getElementById('lowWaterDays').textContent = stats.lowWaterDays;
            document.getElementById('lowWaterPercentage').textContent = `(${stats.lowWaterPercentage.toFixed(1)}%)`;

            const avgTableHtml = `
                        <tr>
                            <td>血壓</td>
                            <td>${stats.avgSystolicBP?.toFixed(1) || 'N/A'} / ${stats.avgDiastolicBP?.toFixed(1) || 'N/A'} mmHg</td>
                            <td>≤ 120/80 mmHg</td>
                            <td>${(stats.avgSystolicBP > 120 || stats.avgDiastolicBP > 80) ? '<span class="badge badge-danger">偏高</span>' : '<span class="badge badge-success">正常</span>'}</td>
                        </tr>
                        <tr>
                            <td>血糖</td>
                            <td>${stats.avgBloodSugar?.toFixed(1) || 'N/A'} mg/dL</td>
                            <td>≤ 99 mg/dL</td>
                            <td>${stats.avgBloodSugar > 99 ? '<span class="badge badge-danger">偏高</span>' : '<span class="badge badge-success">正常</span>'}</td>
                        </tr>
                        <tr>
                            <td>飲水量</td>
                            <td>${stats.avgWaterIntake?.toFixed(0) || 'N/A'} ml</td>
                            <td>≥ 2000 ml</td>
                            <td>${stats.avgWaterIntake < 2000 ? '<span class="badge badge-warning">不足</span>' : '<span class="badge badge-success">充足</span>'}</td>
                        </tr>
                        <tr>
                            <td>運動時間</td>
                            <td>${stats.avgExerciseDuration?.toFixed(1) || 'N/A'} 分鐘</td>
                            <td>≥ 150 分鐘/週</td>
                            <td>${stats.avgExerciseDuration < 150 ? '<span class="badge badge-warning">不足</span>' : '<span class="badge badge-success">充足</span>'}</td>
                        </tr>
                        <tr>
                            <td>🚬 抽菸 (每日平均)</td>
                            <td>${stats.avgCigarettes?.toFixed(1) || '0'} 支 (總計 ${stats.totalCigarettes?.toFixed(0) || '0'} 支)</td>
                            <td>≤ 10 支</td>
                            <td>${stats.avgCigarettes > 10 ? '<span class="badge badge-danger">偏多</span>' : stats.avgCigarettes > 0 ? '<span class="badge badge-warning">建議戒菸</span>' : '<span class="badge badge-success">良好</span>'}</td>
                        </tr>
                        <tr>
                            <td>🌿 檳榔 (每日平均)</td>
                            <td>${stats.avgBetelNut?.toFixed(1) || '0'} 次 (總計 ${stats.totalBetelNut?.toFixed(0) || '0'} 次)</td>
                            <td>≤ 10 次</td>
                            <td>${stats.avgBetelNut > 10 ? '<span class="badge badge-danger">偏多</span>' : stats.avgBetelNut > 0 ? '<span class="badge badge-warning">建議戒除</span>' : '<span class="badge badge-success">良好</span>'}</td>
                        </tr>
                        <tr>
                            <td>🥬 蔬菜 (每日平均)</td>
                            <td>${stats.avgVegetables?.toFixed(1) || 'N/A'} 份</td>
                            <td>建議 3-5 份</td>
                            <td>${stats.avgVegetables >= 3 ? '<span class="badge badge-success">充足</span>' : '<span class="badge badge-warning">可增加</span>'}</td>
                        </tr>
                        <tr>
                            <td>🥩 蛋白質 (每日平均)</td>
                            <td>${stats.avgProtein?.toFixed(1) || 'N/A'} 份</td>
                            <td>建議 3-5 份</td>
                            <td>${stats.avgProtein >= 3 ? '<span class="badge badge-success">充足</span>' : '<span class="badge badge-warning">可增加</span>'}</td>
                        </tr>
                        <tr>
                            <td>🍚 澱粉 (每日平均)</td>
                            <td>${stats.avgCarbs?.toFixed(1) || 'N/A'} 份</td>
                            <td>建議 2-4 份</td>
                            <td>${stats.avgCarbs >= 2 && stats.avgCarbs <= 4 ? '<span class="badge badge-success">適中</span>' : '<span class="badge badge-warning">需調整</span>'}</td>
                        </tr>
                    `;
            document.getElementById('avgTable').innerHTML = avgTableHtml;

            drawCharts(data.charts);
            displayMealRecords(data, currentReportType);
            displayBeverageRecords(data, currentReportType);
        }

        function displayMealRecords(data, reportType) {
            const mealDiv = document.getElementById('mealTable');

            if (reportType === 1) {
                const summary = data.charts.weeklyMealSummary;
                let html = `
                            <div style="background: #fef3c7; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid #f59e0b;">
                                <h4 style="margin: 0 0 0.5rem 0; color: #92400e;">📊 當週總量</h4>
                                <div style="line-height: 1.8;">
                                    <div>🥬 蔬菜: ${summary?.totalVegetables?.toFixed(1) || 0} 份 (平均 ${summary?.avgVegetables?.toFixed(1) || 0} 份/天)</div>
                                    <div>🥩 蛋白質: ${summary?.totalProtein?.toFixed(1) || 0} 份 (平均 ${summary?.avgProtein?.toFixed(1) || 0} 份/天)</div>
                                    <div>🍚 澱粉: ${summary?.totalCarbs?.toFixed(1) || 0} 份 (平均 ${summary?.avgCarbs?.toFixed(1) || 0} 份/天)</div>
                                </div>
                            </div>
                            <table><thead><tr><th>日期</th><th>三餐總計</th></tr></thead><tbody>`;

                data.charts.mealRecords.forEach(r => {
                    html += generateMealRow(r);
                });

                html += '</tbody></table>';
                mealDiv.innerHTML = html;

            } else if (reportType === 2) {
                const summary = data.charts.monthlyMealSummary;
                let html = `
                            <div style="background: #fef3c7; padding: 1rem; border-radius: 8px; margin-bottom: 1rem; border-left: 4px solid #f59e0b;">
                                <h4 style="margin: 0 0 0.5rem 0; color: #92400e;">📊 當月總量</h4>
                                <div style="line-height: 1.8;">
                                    <div>🥬 蔬菜: ${summary?.totalVegetables?.toFixed(1) || 0} 份 (平均 ${summary?.avgVegetables?.toFixed(1) || 0} 份/天)</div>
                                    <div>🥩 蛋白質: ${summary?.totalProtein?.toFixed(1) || 0} 份 (平均 ${summary?.avgProtein?.toFixed(1) || 0} 份/天)</div>
                                    <div>🍚 澱粉: ${summary?.totalCarbs?.toFixed(1) || 0} 份 (平均 ${summary?.avgCarbs?.toFixed(1) || 0} 份/天)</div>
                                </div>
                            </div>
                            <div id="monthlyMealWeeks"></div>`;

                mealDiv.innerHTML = html;
                generateMonthlyWeeks(data.charts.mealRecords, 'meal');

            } else if (reportType === 3) {
                const summary = data.charts.yearlyMealSummary;
                mealDiv.innerHTML = `
                            <div style="background: #fef3c7; padding: 1.5rem; border-radius: 8px; border-left: 4px solid #f59e0b;">
                                <h4 style="margin: 0 0 0.5rem 0; color: #92400e;">📊 全年總量</h4>
                                <div style="line-height: 2; font-size: 1.05rem;">
                                    <div>🥬 蔬菜: ${summary?.totalVegetables?.toFixed(1) || 0} 份 (平均 ${summary?.avgVegetables?.toFixed(1) || 0} 份/天)</div>
                                    <div>🥩 蛋白質: ${summary?.totalProtein?.toFixed(1) || 0} 份 (平均 ${summary?.avgProtein?.toFixed(1) || 0} 份/天)</div>
                                    <div>🍚 澱粉: ${summary?.totalCarbs?.toFixed(1) || 0} 份 (平均 ${summary?.avgCarbs?.toFixed(1) || 0} 份/天)</div>
                                </div>
                            </div>`;
            }
        }

        function displayBeverageRecords(data, reportType) {
            const bevDiv = document.getElementById('beverageTable');

            if (reportType === 1) {
                if (data.charts.beverageRecords && data.charts.beverageRecords.length > 0) {
                    let html = '<table><thead><tr><th>日期</th><th>飲料</th></tr></thead><tbody>';
                    data.charts.beverageRecords.forEach(r => {
                        html += `<tr><td>${r.date}</td><td>${r.beverage}</td></tr>`;
                    });
                    html += '</tbody></table>';
                    bevDiv.innerHTML = html;
                } else {
                    bevDiv.innerHTML = '<p style="text-align:center; padding: 2rem; color: #999;">無記錄</p>';
                }

            } else if (reportType === 2) {
                if (data.charts.beverageRecords && data.charts.beverageRecords.length > 0) {
                    bevDiv.innerHTML = '<div id="monthlyBevWeeks"></div>';
                    generateMonthlyWeeks(data.charts.beverageRecords, 'beverage');
                } else {
                    bevDiv.innerHTML = '<p style="text-align:center; padding: 2rem; color: #999;">無記錄</p>';
                }

            } else if (reportType === 3) {
                if (data.charts.beverageRecords && data.charts.beverageRecords.length > 0) {
                    bevDiv.innerHTML = '<div id="yearlyBevMonths"></div>';
                    generateYearlyMonths(data.charts.beverageRecords);
                } else {
                    bevDiv.innerHTML = '<p style="text-align:center; padding: 2rem; color: #999;">無記錄</p>';
                }
            }
        }

        function generateMealRow(r) {
            let mealContent = '<div style="line-height: 1.8; text-align: left;">';

            if (r.mealData) {
                const { vegetables, protein, carbs } = r.mealData;

                const getTotal = (arr) => {
                    if (!arr || arr.length === 0) return null;
                    if (arr.length === 1) {
                        const val = parseFloat(arr[0]);
                        return isNaN(val) ? arr[0] : (val % 1 === 0 ? val.toFixed(0) : val.toFixed(1));
                    }
                    let total = 0;
                    arr.forEach(item => {
                        const num = parseFloat(item);
                        if (!isNaN(num)) total += num;
                    });
                    return total % 1 === 0 ? total.toFixed(0) : total.toFixed(1);
                };

                const vegTotal = getTotal(vegetables);
                const protTotal = getTotal(protein);
                const carbTotal = getTotal(carbs);

                if (vegTotal) {
                    mealContent += `<div>🥬 蔬菜: ${vegTotal}</div>`;
                }
                if (protTotal) {
                    mealContent += `<div>🥩 蛋白質: ${protTotal}</div>`;
                }
                if (carbTotal) {
                    mealContent += `<div>🍚 澱粉: ${carbTotal}</div>`;
                }

                if (!vegTotal && !protTotal && !carbTotal) {
                    mealContent += '<div style="color: #999;">無記錄</div>';
                }
            } else {
                mealContent += `<div>${r.meals || '無記錄'}</div>`;
            }

            mealContent += '</div>';

            return `<tr><td style="white-space: nowrap;">${r.date}</td><td>${mealContent}</td></tr>`;
        }

        function generateMonthlyWeeks(records, type) {
            const targetDiv = type === 'meal' ? 'monthlyMealWeeks' : 'monthlyBevWeeks';
            const container = document.getElementById(targetDiv);

            if (!records || records.length === 0) {
                container.innerHTML = '<p style="text-align:center; padding: 2rem; color: #999;">無記錄</p>';
                return;
            }

            const firstRecord = records[0];
            const date = new Date(firstRecord.date);
            const year = date.getFullYear();
            const month = date.getMonth();

            const monthFirstDay = new Date(year, month, 1);
            const monthLastDay = new Date(year, month + 1, 0);

            const weeks = [];
            let currentStart = new Date(monthFirstDay);

            while (currentStart <= monthLastDay) {
                const weekEnd = new Date(currentStart);
                weekEnd.setDate(weekEnd.getDate() + 6);

                const actualEnd = weekEnd > monthLastDay ? monthLastDay : weekEnd;

                weeks.push({
                    start: new Date(currentStart),
                    end: actualEnd,
                    records: []
                });

                currentStart.setDate(currentStart.getDate() + 7);
            }

            records.forEach(r => {
                const recordDate = new Date(r.date);
                const week = weeks.find(w => recordDate >= w.start && recordDate <= w.end);
                if (week) {
                    week.records.push(r);
                }
            });

            let html = '';
            weeks.forEach((week, idx) => {
                const weekStartStr = `${String(week.start.getMonth() + 1).padStart(2, '0')}/${String(week.start.getDate()).padStart(2, '0')}`;
                const weekEndStr = `${String(week.end.getMonth() + 1).padStart(2, '0')}/${String(week.end.getDate()).padStart(2, '0')}`;

                html += `
                            <div class="collapsible-section" style="margin-bottom: 0.5rem;">
                                <div class="collapsible-header" onclick="toggleSection('week${type}${idx}')" style="cursor: pointer; padding: 0.75rem; background: #f3f4f6; border-radius: 6px; display: flex; justify-content: space-between; align-items: center;">
                                    <span style="font-weight: 600;">📅 ${weekStartStr} ~ ${weekEndStr}</span>
                                    <span id="icon-week${type}${idx}">▼</span>
                                </div>
                                <div id="week${type}${idx}" class="collapsible-content" style="display: none; padding: 1rem; background: #fafafa; border-radius: 0 0 6px 6px;">`;

                if (week.records.length > 0) {
                    html += `
                                    <table style="width: 100%; border-collapse: collapse;">
                                        <thead>
                                            <tr>
                                                <th style="border: 1px solid #e5e7eb; padding: 0.5rem; background: #f9fafb;">日期</th>
                                                <th style="border: 1px solid #e5e7eb; padding: 0.5rem; background: #f9fafb;">${type === 'meal' ? '三餐' : '飲料'}</th>
                                            </tr>
                                        </thead>
                                        <tbody>`;

                    week.records.forEach(r => {
                        const displayDate = new Date(r.date);
                        const dateStr = `${String(displayDate.getMonth() + 1).padStart(2, '0')}/${String(displayDate.getDate()).padStart(2, '0')}`;

                        if (type === 'meal') {
                            html += generateMealRow({ ...r, date: dateStr });
                        } else {
                            html += `<tr>
                                        <td style="border: 1px solid #e5e7eb; padding: 0.5rem;">${dateStr}</td>
                                        <td style="border: 1px solid #e5e7eb; padding: 0.5rem;">${r.beverage || '無記錄'}</td>
                                    </tr>`;
                        }
                    });

                    html += `</tbody></table>`;
                } else {
                    html += `<p style="text-align:center; padding: 1rem; color: #999;">此週無記錄</p>`;
                }

                html += `</div></div>`;
            });

            container.innerHTML = html;
        }

        function generateYearlyMonths(records) {
            const container = document.getElementById('yearlyBevMonths');

            if (!records || records.length === 0) {
                container.innerHTML = '<p style="text-align:center; padding: 2rem; color: #999;">無記錄</p>';
                return;
            }

            const months = {};
            records.forEach(r => {
                const date = new Date(r.date);
                const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;

                if (!months[monthKey]) {
                    months[monthKey] = [];
                }
                months[monthKey].push(r);
            });

            let html = '';
            Object.keys(months).sort().forEach((monthKey, midx) => {
                const monthData = months[monthKey];
                const [year, month] = monthKey.split('-');
                const monthName = `${year}年${month}月`;

                html += `
                            <div class="collapsible-section" style="margin-bottom: 0.5rem;">
                                <div class="collapsible-header" onclick="toggleSection('month${midx}')" style="cursor: pointer; padding: 0.75rem; background: #dbeafe; border-radius: 6px; display: flex; justify-content: space-between; align-items: center;">
                                    <span style="font-weight: 700;">📅 ${monthName}</span>
                                    <span id="icon-month${midx}">▼</span>
                                </div>
                                <div id="month${midx}" class="collapsible-content" style="display: none; padding: 1rem; background: #f0f9ff; border-radius: 0 0 6px 6px;">`;

                const monthFirstDay = new Date(parseInt(year), parseInt(month) - 1, 1);
                const monthLastDay = new Date(parseInt(year), parseInt(month), 0);

                const weeks = [];
                let currentStart = new Date(monthFirstDay);

                while (currentStart <= monthLastDay) {
                    const weekEnd = new Date(currentStart);
                    weekEnd.setDate(weekEnd.getDate() + 6);

                    const actualEnd = weekEnd > monthLastDay ? monthLastDay : weekEnd;

                    weeks.push({
                        start: new Date(currentStart),
                        end: actualEnd,
                        records: []
                    });

                    currentStart.setDate(currentStart.getDate() + 7);
                }

                monthData.forEach(r => {
                    const recordDate = new Date(r.date);
                    const week = weeks.find(w => recordDate >= w.start && recordDate <= w.end);
                    if (week) {
                        week.records.push(r);
                    }
                });

                weeks.forEach((week, widx) => {
                    const weekStartStr = `${String(week.start.getMonth() + 1).padStart(2, '0')}/${String(week.start.getDate()).padStart(2, '0')}`;
                    const weekEndStr = `${String(week.end.getMonth() + 1).padStart(2, '0')}/${String(week.end.getDate()).padStart(2, '0')}`;

                    html += `
                                <div class="collapsible-section" style="margin-bottom: 0.5rem;">
                                    <div class="collapsible-header" onclick="toggleSection('week${midx}${widx}')" style="cursor: pointer; padding: 0.5rem; background: #f3f4f6; border-radius: 4px; display: flex; justify-content: space-between; align-items: center;">
                                        <span style="font-weight: 600; font-size: 0.95rem;">📅 ${weekStartStr} ~ ${weekEndStr}</span>
                                        <span id="icon-week${midx}${widx}">▼</span>
                                    </div>
                                    <div id="week${midx}${widx}" class="collapsible-content" style="display: none; padding: 0.75rem; background: #fafafa; border-radius: 0 0 4px 4px;">`;

                    if (week.records.length > 0) {
                        html += `
                                        <table style="width: 100%; border-collapse: collapse; font-size: 0.9rem;">
                                            <thead>
                                                <tr>
                                                    <th style="border: 1px solid #e5e7eb; padding: 0.4rem; background: #f9fafb;">日期</th>
                                                    <th style="border: 1px solid #e5e7eb; padding: 0.4rem; background: #f9fafb;">飲料</th>
                                                </tr>
                                            </thead>
                                            <tbody>`;

                        week.records.forEach(r => {
                            const displayDate = new Date(r.date);
                            const dateStr = `${String(displayDate.getMonth() + 1).padStart(2, '0')}/${String(displayDate.getDate()).padStart(2, '0')}`;

                            html += `<tr>
                                        <td style="border: 1px solid #e5e7eb; padding: 0.4rem;">${dateStr}</td>
                                        <td style="border: 1px solid #e5e7eb; padding: 0.4rem;">${r.beverage || '無記錄'}</td>
                                    </tr>`;
                        });

                        html += `</tbody></table>`;
                    } else {
                        html += `<p style="text-align:center; padding: 1rem; color: #999; font-size: 0.9rem;">此週無記錄</p>`;
                    }

                    html += `</div></div>`;
                });

                html += `</div></div>`;
            });

            container.innerHTML = html;
        }

        function toggleSection(id) {
            const content = document.getElementById(id);
            const icon = document.getElementById('icon-' + id);

            if (content.style.display === 'none') {
                content.style.display = 'block';
                icon.textContent = '▲';
            } else {
                content.style.display = 'none';
                icon.textContent = '▼';
            }
        }

        function drawCharts(chartData) {
            Object.values(charts).forEach(chart => {
                if (chart) chart.destroy();
            });
            charts = {};

            if (chartData.bloodPressureData && chartData.bloodPressureData.length > 0) {
                const bpCtx = document.getElementById('bpChart').getContext('2d');
                charts.bp = new Chart(bpCtx, {
                    type: 'line',
                    data: {
                        labels: chartData.bloodPressureData.map(d => d.date),
                        datasets: [{
                            label: '收縮壓',
                            data: chartData.bloodPressureData.map(d => d.value),
                            borderColor: 'rgb(220, 38, 38)',
                            backgroundColor: 'rgba(220, 38, 38, 0.1)',
                            tension: 0.4,
                            fill: true
                        }, {
                            label: '舒張壓',
                            data: chartData.bloodPressureData.map(d => d.value2),
                            borderColor: 'rgb(37, 99, 235)',
                            backgroundColor: 'rgba(37, 99, 235, 0.1)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: { display: true, text: '❤️ 血壓趨勢 (標準值: 120/80 mmHg)' }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'mmHg' }
                            }
                        }
                    }
                });
            }

            if (chartData.bloodSugarData && chartData.bloodSugarData.length > 0) {
                const bsCtx = document.getElementById('bsChart').getContext('2d');
                charts.bs = new Chart(bsCtx, {
                    type: 'line',
                    data: {
                        labels: chartData.bloodSugarData.map(d => d.date),
                        datasets: [{
                            label: '血糖',
                            data: chartData.bloodSugarData.map(d => d.value),
                            borderColor: 'rgb(220, 38, 38)',
                            backgroundColor: 'rgba(220, 38, 38, 0.1)',
                            tension: 0.4,
                            fill: true,
                            pointBackgroundColor: chartData.bloodSugarData.map(d => d.isAbnormal ? 'red' : 'green')
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: { display: true, text: '🩸 血糖趨勢 (標準值: ≤99 mg/dL)' }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'mg/dL' }
                            }
                        }
                    }
                });
            }

            if (chartData.waterIntakeData && chartData.waterIntakeData.length > 0) {
                const waterCtx = document.getElementById('waterChart').getContext('2d');
                charts.water = new Chart(waterCtx, {
                    type: 'bar',
                    data: {
                        labels: chartData.waterIntakeData.map(d => d.date),
                        datasets: [{
                            label: '飲水量 (ml)',
                            data: chartData.waterIntakeData.map(d => d.value),
                            backgroundColor: chartData.waterIntakeData.map(d => d.isAbnormal ? 'rgba(239, 108, 0, 0.6)' : 'rgba(6, 182, 212, 0.6)'),
                            borderColor: chartData.waterIntakeData.map(d => d.isAbnormal ? 'rgb(239, 108, 0)' : 'rgb(8, 145, 178)'),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: { display: true, text: '💧 飲水量趨勢 (建議: ≥2000 ml)' }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: 'ml' }
                            }
                        }
                    }
                });
            }

            if (chartData.exerciseDurationData && chartData.exerciseDurationData.length > 0) {
                const exerciseCtx = document.getElementById('exerciseChart').getContext('2d');
                charts.exercise = new Chart(exerciseCtx, {
                    type: 'bar',
                    data: {
                        labels: chartData.exerciseDurationData.map(d => d.date),
                        datasets: [{
                            label: '運動時間 (分鐘)',
                            data: chartData.exerciseDurationData.map(d => d.value),
                            backgroundColor: chartData.exerciseDurationData.map(d => d.isAbnormal ? 'rgba(239, 108, 0, 0.6)' : 'rgba(16, 185, 129, 0.6)'),
                            borderColor: chartData.exerciseDurationData.map(d => d.isAbnormal ? 'rgb(239, 108, 0)' : 'rgb(5, 150, 105)'),
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: { display: true, text: '🏃 運動時間趨勢 (建議: ≥150 分鐘/週)' }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: '分鐘' }
                            }
                        }
                    }
                });
            }

            if (chartData.cigarettesData && chartData.cigarettesData.length > 0) {
                const cigCtx = document.getElementById('cigaretteChart').getContext('2d');
                charts.cigarette = new Chart(cigCtx, {
                    type: 'line',
                    data: {
                        labels: chartData.cigarettesData.map(d => d.date),
                        datasets: [{
                            label: '抽菸支數',
                            data: chartData.cigarettesData.map(d => d.value),
                            borderColor: 'rgb(220, 38, 38)',
                            backgroundColor: 'rgba(220, 38, 38, 0.1)',
                            tension: 0.4,
                            fill: true,
                            pointBackgroundColor: chartData.cigarettesData.map(d => d.isAbnormal ? 'rgb(220, 38, 38)' : 'rgb(22, 163, 74)')
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: '🚬 抽菸趨勢 (建議: 0 支)',
                                font: { size: 16, weight: 'bold' }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: '支' }
                            }
                        }
                    }
                });
                console.log('✅ 抽菸圖表已繪製', chartData.cigarettesData.length, '筆資料');
            } else {
                console.warn('⚠️ 無抽菸數據');
            }

            if (chartData.betelNutData && chartData.betelNutData.length > 0) {
                const betelCtx = document.getElementById('betelNutChart').getContext('2d');
                charts.betelNut = new Chart(betelCtx, {
                    type: 'line',
                    data: {
                        labels: chartData.betelNutData.map(d => d.date),
                        datasets: [{
                            label: '檳榔次數',
                            data: chartData.betelNutData.map(d => d.value),
                            borderColor: 'rgb(22, 163, 74)',
                            backgroundColor: 'rgba(22, 163, 74, 0.1)',
                            tension: 0.4,
                            fill: true,
                            pointBackgroundColor: chartData.betelNutData.map(d => d.isAbnormal ? 'rgb(220, 38, 38)' : 'rgb(22, 163, 74)')
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: '🌿 檳榔趨勢 (建議: 0 次)',
                                font: { size: 16, weight: 'bold' }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: { display: true, text: '次' }
                            }
                        }
                    }
                });
                console.log('✅ 檳榔圖表已繪製', chartData.betelNutData.length, '筆資料');
            } else {
                console.warn('⚠️ 無檳榔數據');
            }
        }

        function downloadPdf() {
            if (!currentReport) {
                alert('請先查詢報表');
                return;
            }
            alert('下載 PDF 功能開發中...');
        }
    </script>
</body>
</html>