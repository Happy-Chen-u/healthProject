@{
    ViewData["Title"] = "查詢病患健康資訊";
    Layout = null;
}

<style>
    .admin-container {
        max-width: 1200px;
        margin: 2rem auto;
        padding: 0 1rem;
    }

    body {
        background-color: #e1eae0;
        font-family: 'Microsoft JhengHei', 'Segoe UI', Arial, sans-serif;
        min-height: 100vh;
        margin: 0;
        padding: 0;
    }

    .page-header {
        background: linear-gradient(135deg, #337f4b 0%, #275a37 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
    }

    .page-header h1 {
        margin: 0;
        font-size: 1.8rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .search-section {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .search-title {
        font-size: 1.2rem;
        font-weight: 700;
        color: #337f4b;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .search-group {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .search-input {
        flex: 1;
        min-width: 250px;
        padding: 1rem;
        border: 2px solid #e2e8f0;
        border-radius: 10px;
        font-size: 1rem;
        font-family: inherit;
    }

    .search-input:focus {
        outline: none;
        border-color: #81af74;
        box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
    }

    .btn-search {
        background: linear-gradient(135deg, #81af74 0%, #275a37 100%);
        color: white;
        padding: 1rem 2rem;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(139, 92, 246, 0.3);
    }

    .btn-search:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
    }

    .patient-info {
        background: linear-gradient(135deg, #f0fdf4 0%, #dcfce7 100%);
        border: 2px solid #10b981;
        padding: 1.5rem;
        border-radius: 10px;
        margin-top: 1.5rem;
        display: none;
    }

    .patient-info.show {
        display: block;
    }

    .patient-name {
        font-size: 1.3rem;
        font-weight: 700;
        color: #059669;
        margin-bottom: 0.5rem;
    }

    .patient-id {
        color: #064e3b;
        font-size: 0.95rem;
    }

    .results-section {
        display: none;
    }

    .results-section.show {
        display: block;
    }

    .date-group {
        background: white;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
    }

    .date-header {
        background: linear-gradient(#e0ecdd);
        padding: 1.5rem 2rem;
        border-bottom: 3px solid #74a86f;
    }

    .date-title {
        font-size: 1.3rem;
        font-weight: 700;
        color: #408355;
        margin-bottom: 0.5rem;
    }

    .date-summary {
        display: flex;
        gap: 2rem;
        flex-wrap: wrap;
        font-size: 0.9rem;
        color: #2f5d3f;
    }

    .record-items {
        padding: 1.5rem;
    }

    .record-item {
        background: #f8fafc;
        border-left: 4px solid #63885e;
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1rem;
    }

    .record-item:last-child {
        margin-bottom: 0;
    }

    .record-time {
        font-size: 0.95rem;
        color: #64748b;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .data-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
    }

    .data-item {
        padding: 0.75rem;
        background: white;
        border-radius: 6px;
        border-left: 3px solid #63885e;
    }

    .data-label {
        font-size: 0.85rem;
        color: #64748b;
        margin-bottom: 0.5rem;
    }

    .data-value {
        font-size: 1rem;
        font-weight: 600;
        color: #1e293b;
    }

    .daily-summary {
        background: linear-gradient(135deg, #fef3c7 0%, #fde68a 100%);
        border-radius: 10px;
        padding: 1.5rem;
        margin: 0 1.5rem 1.5rem 1.5rem;
    }

    .daily-summary-title {
        font-size: 1.1rem;
        font-weight: 700;
        color: #92400e;
        margin-bottom: 1rem;
    }

    .empty-state {
        text-align: center;
        padding: 3rem 2rem;
        background: white;
        border-radius: 15px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        color: #64748b;
    }

    .empty-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
        opacity: 0.5;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 10px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
    }

    .btn-secondary {
        background: linear-gradient(135deg, #78909C 0%, #607D8B 100%);
        color: white;
        box-shadow: 0 4px 15px rgba(96, 125, 139, 0.3);
    }

    .btn-secondary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(96, 125, 139, 0.4);
        text-decoration: none;
        color: white;
    }

    /* 🆕 按鈕樣式 */
    .btn-toggle-details {
        background: linear-gradient(135deg, #81af74 0%, #5a8a4a 100%);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-size: 0.95rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(129, 175, 116, 0.3);
        width: 100%;
    }

    .btn-toggle-details:hover {
        background: linear-gradient(135deg, #5a8a4a 0%, #3d5f32 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(129, 175, 116, 0.4);
    }

    .btn-toggle-details.active {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
    }

    @@media (max-width: 768px) {
        .search-group {
            flex-direction: column;
        }

        .data-grid {
            grid-template-columns: 1fr;
        }

        .date-summary {
            flex-direction: column;
            gap: 0.5rem;
        }
    }
</style>

<div class="admin-container">
    <div class="page-header">
        <h1>
            <span>🔍</span>
            <span>查詢病患健康資訊</span>
        </h1>
    </div>

    <div style="margin-bottom: 1.5rem;">
        <a href="@Url.Action("Dashboard", "Home")" class="btn btn-secondary">
            ← 返回主選單
        </a>
    </div>

    <div class="search-section">
        <div class="search-title">
            <span>👤</span>
            <span>輸入病患身分證字號</span>
        </div>
        <div class="search-group">
            <input type="text"
                   id="searchIdNumber"
                   class="search-input"
                   placeholder="請輸入身分證字號 (例如: A123456789)"
                   maxlength="10" />
            <button type="button" class="btn-search" onclick="searchPatient()">
                🔍 搜尋
            </button>
        </div>

        <div id="patientInfo" class="patient-info">
            <div class="patient-name" id="patientName"></div>
            <div class="patient-id" id="patientId"></div>
        </div>
    </div>

    <div id="resultsSection" class="results-section">
        <div id="recordsContainer"></div>
        <div id="emptyState" class="empty-state" style="display: none;">
            <div class="empty-icon">📝</div>
            <div>此病患尚無健康資訊紀錄</div>
        </div>
    </div>
</div>

<script>
    // ✅ 在最前面定義 parseMeal 函數
    function parseMeal(mealData) {
        if (!mealData) return null;
        if (typeof mealData === "object") return mealData;
        try {
            return JSON.parse(mealData);
        } catch {
            return null;
        }
    }

    // ✅ 計算三餐總和
    function calculateMealTotal(items) {
        let total = 0;
        let others = [];
        
        items.forEach(item => {
            if (typeof item === 'number') {
                total += item;
            } else if (typeof item === 'string') {
                // 處理 "1+1.5" 這種算式
                if (item.includes('+')) {
                    const parts = item.split('+');
                    parts.forEach(part => {
                        const num = parseFloat(part.trim());
                        if (!isNaN(num)) {
                            total += num;
                        } else {
                            others.push(part.trim());
                        }
                    });
                } else {
                    const num = parseFloat(item);
                    if (!isNaN(num)) {
                        total += num;
                    } else {
                        others.push(item);
                    }
                }
            }
        });
        
        const parts = [];
        if (total > 0) {
            parts.push(total % 1 === 0 ? total.toString() : total.toFixed(1));
        }
        parts.push(...others);
        
        return parts.length > 0 ? parts.join(' + ') : null;
    }

    async function searchPatient() {
        const idNumber = document.getElementById('searchIdNumber').value.trim();

        if (!idNumber) {
            alert('請輸入身分證字號');
            return;
        }

        try {
            const response = await fetch('@Url.Action("SearchPatientRecords", "DailyHealth")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': '@Html.AntiForgeryToken()'
                },
                body: JSON.stringify({ idNumber: idNumber })
            });

            const result = await response.json();

            if (result.success) {
                document.getElementById('patientName').textContent = result.data.patientName;
                document.getElementById('patientId').textContent = `身分證字號:${result.data.idNumber}`;
                document.getElementById('patientInfo').classList.add('show');
                displayRecords(result.data.records);
            } else {
                alert(result.message || '查無此病患');
                document.getElementById('patientInfo').classList.remove('show');
                document.getElementById('resultsSection').classList.remove('show');
            }
        } catch (error) {
            console.error('搜尋失敗:', error);
            alert('搜尋失敗,請稍後再試');
        }
    }

    function displayRecords(groupedRecords) {
        const resultsSection = document.getElementById('resultsSection');
        const recordsContainer = document.getElementById('recordsContainer');
        const emptyState = document.getElementById('emptyState');

        resultsSection.classList.add('show');

        if (!groupedRecords || groupedRecords.length === 0) {
            recordsContainer.innerHTML = '';
            emptyState.style.display = 'block';
            return;
        }

        emptyState.style.display = 'none';

        recordsContainer.innerHTML = groupedRecords.map(group => {
            const records = group.records;
            const date = new Date(group.date);
            const dateStr = `${date.getFullYear()}年${String(date.getMonth() + 1).padStart(2, '0')}月${String(date.getDate()).padStart(2, '0')}日`;

            // 計算當日統計
            const totalWater = records.reduce((sum, r) => sum + (r.waterIntake || 0), 0);
            const totalExercise = records.reduce((sum, r) => sum + (r.exerciseDuration || 0), 0);
            
            const systolicReadings = records.flatMap(r => [
                r.bp_First_1_Systolic, r.bp_First_2_Systolic, 
                r.bp_Second_1_Systolic, r.bp_Second_2_Systolic
            ].filter(v => v != null));
            const diastolicReadings = records.flatMap(r => [
                r.bp_First_1_Diastolic, r.bp_First_2_Diastolic,
                r.bp_Second_1_Diastolic, r.bp_Second_2_Diastolic
            ].filter(v => v != null));
            
            const avgSystolic = systolicReadings.length > 0 
                ? Math.round(systolicReadings.reduce((a, b) => a + b, 0) / systolicReadings.length) 
                : null;
            const avgDiastolic = diastolicReadings.length > 0 
                ? Math.round(diastolicReadings.reduce((a, b) => a + b, 0) / diastolicReadings.length) 
                : null;

            let summaryItems = `<span class="summary-item">📝 共 ${records.length} 筆記錄</span>`;
            if (totalWater > 0) summaryItems += `<span class="summary-item">💧 ${totalWater} ml</span>`;
            if (totalExercise > 0) summaryItems += `<span class="summary-item">🏃 ${totalExercise} 分鐘</span>`;
            if (avgSystolic && avgDiastolic) summaryItems += `<span class="summary-item">❤️ ${avgSystolic}/${avgDiastolic} mmHg</span>`;

            // 各筆記錄
            const recordItems = records.map(record => {
                const time = record.recordTime ? new Date(`2000-01-01T${record.recordTime}`).toLocaleTimeString('zh-TW', {hour: '2-digit', minute: '2-digit'}) : '未記錄時間';
                
                let dataItems = '';

                // 血壓
                if (record.bp_First_1_Systolic || record.bp_First_1_Diastolic || 
                    record.bp_First_2_Systolic || record.bp_First_2_Diastolic ||
                    record.bp_Second_1_Systolic || record.bp_Second_1_Diastolic ||
                    record.bp_Second_2_Systolic || record.bp_Second_2_Diastolic) {
                    
                    const sysValues = [record.bp_First_1_Systolic, record.bp_First_2_Systolic, 
                                      record.bp_Second_1_Systolic, record.bp_Second_2_Systolic].filter(v => v);
                    const diaValues = [record.bp_First_1_Diastolic, record.bp_First_2_Diastolic,
                                      record.bp_Second_1_Diastolic, record.bp_Second_2_Diastolic].filter(v => v);
                    const avgSys = sysValues.length > 0 ? Math.round(sysValues.reduce((a, b) => a + b, 0) / sysValues.length) : null;
                    const avgDia = diaValues.length > 0 ? Math.round(diaValues.reduce((a, b) => a + b, 0) / diaValues.length) : null;
                    
                    dataItems += `
                        <div class="data-item" style="grid-column: 1 / -1;">
                            <div class="data-label">❤️ 血壓測量</div>
                            <div class="data-value" style="line-height: 1.8;">`;
                    
                    if (record.bp_First_1_Systolic && record.bp_First_1_Diastolic) {
                        dataItems += `第一次第一遍: ${Math.round(record.bp_First_1_Systolic)}/${Math.round(record.bp_First_1_Diastolic)} mmHg<br>`;
                    }
                    if (record.bp_First_2_Systolic && record.bp_First_2_Diastolic) {
                        dataItems += `第一次第二遍: ${Math.round(record.bp_First_2_Systolic)}/${Math.round(record.bp_First_2_Diastolic)} mmHg<br>`;
                    }
                    if (record.bp_Second_1_Systolic && record.bp_Second_1_Diastolic) {
                        dataItems += `第二次第一遍: ${Math.round(record.bp_Second_1_Systolic)}/${Math.round(record.bp_Second_1_Diastolic)} mmHg<br>`;
                    }
                    if (record.bp_Second_2_Systolic && record.bp_Second_2_Diastolic) {
                        dataItems += `第二次第二遍: ${Math.round(record.bp_Second_2_Systolic)}/${Math.round(record.bp_Second_2_Diastolic)} mmHg<br>`;
                    }
                    if (avgSys && avgDia) {
                        dataItems += `<span style="color: #0891b2; font-weight: 600;">平均: ${avgSys}/${avgDia} mmHg</span>`;
                    }
                    dataItems += `</div></div>`;
                }

                // 三餐
                const breakfast = parseMeal(record.meals_Breakfast || record.Meals_Breakfast);
                if (breakfast && (breakfast.vegetables || breakfast.protein || breakfast.carbs)) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🌅 早餐</div>
                            <div class="data-value meal-lines">
                                ${breakfast.vegetables ? `🥬 蔬菜:${breakfast.vegetables}<br>` : ""}
                                ${breakfast.protein ? `🥩 蛋白質:${breakfast.protein}<br>` : ""}
                                ${breakfast.carbs ? `🍚 澱粉:${breakfast.carbs}` : ""}
                            </div>
                        </div>`;
                }

                const lunch = parseMeal(record.meals_Lunch || record.Meals_Lunch);
                if (lunch && (lunch.vegetables || lunch.protein || lunch.carbs)) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">☀️ 午餐</div>
                            <div class="data-value meal-lines">
                                ${lunch.vegetables ? `🥬 蔬菜:${lunch.vegetables}<br>` : ""}
                                ${lunch.protein ? `🥩 蛋白質:${lunch.protein}<br>` : ""}
                                ${lunch.carbs ? `🍚 澱粉:${lunch.carbs}` : ""}
                            </div>
                        </div>`;
                }

                const dinner = parseMeal(record.meals_Dinner || record.Meals_Dinner);
                if (dinner && (dinner.vegetables || dinner.protein || dinner.carbs)) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🌙 晚餐</div>
                            <div class="data-value meal-lines">
                                ${dinner.vegetables ? `🥬 蔬菜:${dinner.vegetables}<br>` : ""}
                                ${dinner.protein ? `🥩 蛋白質:${dinner.protein}<br>` : ""}
                                ${dinner.carbs ? `🍚 澱粉:${dinner.carbs}` : ""}
                            </div>
                        </div>`;
                }

                if (record.exerciseType || record.exerciseDuration) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🏃 運動</div>
                            <div class="data-value">${record.exerciseType || '運動'} ${record.exerciseDuration ? record.exerciseDuration.toFixed(1) + '分鐘' : ''}</div>
                        </div>`;
                }

                if (record.waterIntake) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">💧 水分攝取</div>
                            <div class="data-value">${Math.round(record.waterIntake)} ml</div>
                        </div>`;
                }

                if (record.beverage) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🥤 飲料</div>
                            <div class="data-value">${record.beverage}</div>
                        </div>`;
                }

                if (record.cigarettes) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🚬 抽菸</div>
                            <div class="data-value">${Math.round(record.cigarettes)} 支</div>
                        </div>`;
                }

                if (record.betelNut) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🌿 檳榔</div>
                            <div class="data-value">${Math.round(record.betelNut)} 次</div>
                        </div>`;
                }

                if (record.bloodSugar) {
                    dataItems += `
                        <div class="data-item">
                            <div class="data-label">🩸 血糖</div>
                            <div class="data-value">${record.bloodSugar.toFixed(1)} mg/dL</div>
                        </div>`;
                }

                return `
                    <div class="record-item">
                        <div class="record-time">⏰ ${time}</div>
                        <div class="data-grid">
                            ${dataItems || '<div style="grid-column: 1 / -1; text-align: center; color: #94a3b8;">無資料</div>'}
                        </div>
                    </div>`;
            }).join('');

            // ✅ 統計三餐總攝取
            const allVeg = [], allProtein = [], allCarbs = [];
            records.forEach(r => {
                const meals = [r.meals_Breakfast, r.meals_Lunch, r.meals_Dinner];
                meals.forEach(m => {
                    const meal = parseMeal(m);
                    if (meal) {
                        if (meal.vegetables && meal.vegetables !== '0') allVeg.push(meal.vegetables);
                        if (meal.protein && meal.protein !== '0') allProtein.push(meal.protein);
                        if (meal.carbs && meal.carbs !== '0') allCarbs.push(meal.carbs);
                    }
                });
            });

            const vegTotal = calculateMealTotal(allVeg);
            const proteinTotal = calculateMealTotal(allProtein);
            const carbsTotal = calculateMealTotal(allCarbs);

            // 其他統計
            const totalCigs = records.reduce((sum, r) => sum + (r.cigarettes || 0), 0);
            const totalBetel = records.reduce((sum, r) => sum + (r.betelNut || 0), 0);
            const bsValues = records.map(r => r.bloodSugar).filter(v => v);
            const avgBS = bsValues.length > 0 ? bsValues.reduce((a, b) => a + b, 0) / bsValues.length : null;

            // ✅ 今日統計 (永遠顯示,不受按鈕控制)
            let dailySummary = '';
            if (records.length > 1) {
                dailySummary = `
                    <div class="daily-summary">
                        <div class="daily-summary-title">📊 今日統計</div>
                        <div class="data-grid">
                            ${totalWater > 0 ? `<div class="data-item"><div class="data-label">💧 總水分</div><div class="data-value">${totalWater} ml</div></div>` : ''}
                            ${totalExercise > 0 ? `<div class="data-item"><div class="data-label">🏃 總運動</div><div class="data-value">${totalExercise} 分鐘</div></div>` : ''}
                            ${avgSystolic && avgDiastolic ? `<div class="data-item"><div class="data-label">❤️ 平均血壓</div><div class="data-value">${avgSystolic}/${avgDiastolic} mmHg</div></div>` : ''}
                            ${avgBS ? `<div class="data-item"><div class="data-label">🩸 平均血糖</div><div class="data-value">${avgBS.toFixed(1)} mg/dL</div></div>` : ''}
                            ${totalCigs > 0 ? `<div class="data-item"><div class="data-label">🚬 總抽菸量</div><div class="data-value">${totalCigs} 支</div></div>` : ''}
                            ${totalBetel > 0 ? `<div class="data-item"><div class="data-label">🌿 總檳榔量</div><div class="data-value">${totalBetel} 次</div></div>` : ''}
                            ${(vegTotal || proteinTotal || carbsTotal) ? `
                                <div class="data-item" style="grid-column: 1 / -1;">
                                    <div class="data-label">🍽️ 今日三餐總計</div>
                                    <div class="data-value" style="line-height: 1.8;">
                                        ${vegTotal ? `<div>🥬 蔬菜: ${vegTotal}</div>` : ''}
                                        ${proteinTotal ? `<div>🥩 蛋白質: ${proteinTotal}</div>` : ''}
                                        ${carbsTotal ? `<div>🍚 澱粉: ${carbsTotal}</div>` : ''}
                                    </div>
                                </div>
                            ` : ''}
                        </div>
                    </div>`;
            }

            // ✅ 按鈕 (只有多筆記錄時顯示)
            const toggleButton = records.length > 1 ? `
                <div style="padding: 1rem 2rem; background: #f8f9fa; border-bottom: 1px solid #e2e8f0;">
                    <button onclick="toggleDetailsAdmin(this)" class="btn-toggle-details">
                        📋 顯示全部 ${records.length} 筆紀錄
                    </button>
                </div>` : '';

            return `
                <div class="date-group">
                    <div class="date-header">
                        <div class="date-title">📅 ${dateStr}</div>
                        <div class="date-summary">${summaryItems}</div>
                    </div>
                    ${toggleButton}
                    <div class="record-items" style="${records.length > 1 ? 'display: none;' : ''}">
                        ${recordItems}
                    </div>
                    ${dailySummary}
                </div>`;
        }).join('');
    }

    // ✅ 切換詳細記錄顯示/隱藏
    function toggleDetailsAdmin(button) {
        const dateGroup = button.closest('.date-group');
        const recordItems = dateGroup.querySelector('.record-items');
        const isHidden = recordItems.style.display === 'none';
        
        if (isHidden) {
            recordItems.style.display = 'block';
            button.textContent = '📋 隱藏詳細記錄';
            button.classList.add('active');
        } else {
            recordItems.style.display = 'none';
            const count = recordItems.querySelectorAll('.record-item').length;
            button.textContent = `📋 顯示全部 ${count} 筆紀錄`;
            button.classList.remove('active');
        }
    }

    // Enter 鍵搜尋
    document.getElementById('searchIdNumber')?.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            e.preventDefault();
            searchPatient();
        }
    });
</script>